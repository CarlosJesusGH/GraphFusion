# from file Sergio sent me on 2022-09-27 ""
import numpy as np
import scipy.stats
import pandas as pd
import seaborn as sns
import networkx as nx
from scipy.stats import uniform

# 1. Functions to generate the Binary networks from network models:

# 1.1 Hyper Geometric:

def get_Hyper_Geometric(Node, Radius):
    
    '''
    Node   : Number of nodes
    Radius : Radius of the network
    '''
    
    G = nx.random_geometric_graph(Node, Radius, dim=3)
    return(G)

# 1.2 Barabasi

def get_m_for_barabasi_albert(Nodes,density):

    '''
    Node    : Number of nodes
    density : Density of the network
    '''
    
    Edges = int(round(Nodes/2 - np.sqrt(Nodes**2/4 - Nodes*(Nodes-1)*density/2)))
    G = nx.barabasi_albert_graph(Nodes,Edges)
    
    return(G)
    
# 1.3 Erdos Renyi
    
def get_Erdos_Renyi(Nodes, density):

    '''
    Node    : Number of nodes
    density : Density of the network
    '''   
    G = nx.erdos_renyi_graph(Nodes, density)
    return(G)
    
# 2. Function to add the probabilities to the previous binary networks:
 
# 2.1 Functions to generate the distributions:
    
def Uniform_distribution(nodes, loc = 0, scale= 1):

    '''
    nodes   : Number of nodes
    ''' 
    # Note_CGH: modified to prevent exception "positional argument follows keyword argument"
    # data_Uniform = uniform.rvs(size=nodes, loc, scale)
    data_Uniform = uniform.rvs(size=nodes, loc=loc, scale=scale)
    
    return(data_Uniform)
       
def Beta_distribution(nodes, mean, variance):
    
    '''
    nodes    : Number of nodes
    mean     : mean of the distribution
    variance : Normalized variance (0 to 1)
    '''   
    
    mu    = mean 
    eta   = variance         
    var   = eta*mu*(1-mu)
    nu    = mu*(1-mu)/var-1
    alpha = nu*  mu
    beta  = nu*(1-mu)
        
    data_Beta = scipy.stats.beta.rvs(alpha, beta, size= nodes)
    
    return(data_Beta)

def Empirical_Distribution(path, size):
    
    '''
    path: path to an empirical distribution (edge list) to sample the probabilities from the real data.
    '''   
    
    file  = pd.read_csv(path,sep = " ", header = None)  
    # Note_CGH: line edited and new parameter included to prevent exception "NameError: name 'n' is not defined" 
    # probs = np.random.choice(file[2] , size= n , replace=True, p=None)
    probs = np.random.choice(file[2] , size= size, replace=True, p=None)
    
    return(probs)
    
# 2.2 Functions to add the probabilities from the previus distributions:
        
def Apply_Prob(G, save_directory, distribution, Name):
    
    '''
    Input:
        
    G              : Networkx object (generated by the network models)
    save_directory : string, to save the output.
    distribution   : pandas dataframe, generated by the distribution functions
    Name           : string, name for the output.
    
    Output:
        
    Edge list with the required format to apply probabilistic graphlets.
    
    '''
    
    Network           = nx.to_pandas_edgelist(G)
    Network.columns   = ["node1", "node2"]  
    Network["weight"] = distribution
    
    # Generate two versions of the network (binary and probabilistic):
    
    Network_Prob = Network.copy()
    Network_Bin  = Network_Prob.copy()
    # Note_CGH: line commented to prevent exception "NameError: name 'x1' is not defined"
    # Network_Bin  = np.repeat(x1,len(Network))
    # PolloTron: it should be: Network_Bin  = np.repeat(1,len(Network), the x is a typo. With it, you are setting a weiht equals 1 to all the edges in the Network.
    # Note_CGH: this line didn't work either, but I think I know what you want to do
    # Network_Bin  = np.repeat(1,len(Network))
    Network_Bin["weight"]  = np.repeat(1,len(Network))
    
    # Back to the edgelist:
    
    Network_Prob = nx.from_pandas_edgelist(Network_Prob,'node1','node2','weight')
    Network_Bin  = nx.from_pandas_edgelist(Network_Bin, 'node1','node2','weight')
    
    # Rename the nodes:
    
    Genes       = Network_Prob.nodes()
    gene2int    = {gene:int for int,gene in enumerate(np.random.permutation(Genes),1)}
    gene2int_df = pd.DataFrame({'gene':list(gene2int.keys()), 'int':list(gene2int.values())})
    
    Network_Prob = nx.relabel_nodes(Network_Prob, gene2int)
    Network_Bin  = nx.relabel_nodes(Network_Bin,  gene2int)
    
    # Save the networks:
    # Note_CGH: those two functions seem to be writing the same info to both files, is that right?
    # PolloTron: With the changes in Network_Bin it should be different. All the weights in Bin should be 1. The edges in Network_Prob should be between 0 and 1.  
    with open(f'{save_directory}Prob_{Name}', 'w') as f:
        for n1,n2 in sorted(map(sorted,Network_Prob.edges())):
            f.write(f"{n1} {n2} {Network_Prob[n1][n2]['weight']}\n")
         
    with open(f'{save_directory}Bin_{Name}', 'w') as f:
        for n1,n2 in sorted(map(sorted,Network_Bin.edges())):
            f.write(f"{n1} {n2} {Network_Bin[n1][n2]['weight']}\n")